// Generated by CoffeeScript 2.5.1
(function() {
  // Operator function for '-'
  var all, any, checkedof, countIt, counter, delws, div, ejoin, element, findMedian, findMode, first, getFerqsTable, getStatisticParameters, h1, h2, h3, h4, h5, h6, htmlget, htmlset, keys, last, makeKeyCells, makeMapCells, makeReport, makeValueCells, max, maxKey, maxValue, min, mul, neue, neueText, reportElement, runApplication, runParser, sub, sum, unique, valueof, values, valueset,
    indexOf = [].indexOf;

  sub = function(x, y) {
    return x - y;
  };

  // Operator function for '+', also allow to sum of array
  sum = function(x, y) {
    if (y == null) {
      return x.reduce(document.flexibel.sum);
    }
    return x + y;
  };

  // Operator function for '*', also allow to mul of array
  mul = function(x, y) {
    if (y == null) {
      return x.reduce(document.flexibel.mul);
    }
    return x * y;
  };

  // Operator function for '/'
  div = function(x, y) {
    return x / y;
  };

  // Returns the min of two elements, or min of array
  min = function(x, y) {
    if (y == null) {
      return x.reduce(document.flexibel.min);
    }
    if (x < y) {
      return x;
    } else {
      return y;
    }
  };

  // Returns the max of two elements, or max of array
  max = function(x, y) {
    if (y == null) {
      return x.reduce(document.flexibel.max);
    }
    if (x > y) {
      return x;
    } else {
      return y;
    }
  };

  last = function(container) {
    return container[container.length - 1];
  };

  first = function(container) {
    return container[0];
  };

  neue = function(name, inner) {
    var elem;
    elem = document.createElement(name);
    if (inner != null) {
      elem.innerHTML = inner;
    }
    return elem;
  };

  neueText = function(name, inner) {
    var elem;
    elem = document.createElement(name);
    if (inner != null) {
      elem.innerText = inner;
    }
    return elem;
  };

  div = function(inner) {
    var elem;
    elem = document.createElement("div");
    if (inner != null) {
      elem.innerHTML = inner;
    }
    return elem;
  };

  h1 = function(text) {
    return neueText("h1", text);
  };

  h2 = function(text) {
    return neueText("h2", text);
  };

  h3 = function(text) {
    return neueText("h3", text);
  };

  h4 = function(text) {
    return neueText("h4", text);
  };

  h5 = function(text) {
    return neueText("h5", text);
  };

  h6 = function(text) {
    return neueText("h6", text);
  };

  element = function(id) {
    if (id.startsWith(".")) {
      return document.getElementsByClassName(id.substring(1));
    }
    return document.getElementById(id);
  };

  valueset = function(id, value) {
    return document.flexibel.element(id).value = value;
  };

  valueof = function(id) {
    return document.flexibel.element(id).value;
  };

  checkedof = function(id) {
    return document.flexibel.element(id).checked;
  };

  htmlset = function(id, html) {
    return document.flexibel.element(id).innerHTML = html;
  };

  htmlget = function(id) {
    return document.flexibel.element(id).innerHTML;
  };

  any = function(values, f) {
    var i, j, len;
    for (j = 0, len = values.length; j < len; j++) {
      i = values[j];
      if (f(i)) {
        return true;
      }
    }
    return false;
  };

  all = function(values, f) {
    var i, j, len;
    for (j = 0, len = values.length; j < len; j++) {
      i = values[j];
      if (!f(i)) {
        return false;
      }
    }
    return true;
  };

  ejoin = function(values) {
    return values.join("");
  };

  delws = function(str, sym) {
    return str.replace(/\s+/g, "");
  };

  values = function(map) {
    return [...map.values()];
  };

  keys = function(map) {
    return [...map.keys()];
  };

  maxKey = function(map) {
    return document.flexibel.keys(map).reduce(document.flexibel.max);
  };

  maxValue = function(map) {
    return document.flexibel.values(map).reduce(document.flexibel.max);
  };

  unique = function(values) {
    return [...new Set(values)];
  };

  countIt = function(map, it) {
    if (map.has(it)) {
      return map.set(it, map.get(it) + 1);
    } else {
      return map.set(it, 1);
    }
  };

  makeValueCells = function(map) {
    var ref, results, v;
    ref = map.values();
    results = [];
    for (v of ref) {
      results.push(`<td>${v}</td>`);
    }
    return results;
  };

  makeKeyCells = function(map) {
    var k, ref, results;
    ref = map.keys();
    results = [];
    for (k of ref) {
      results.push(`<td>${k}</td>`);
    }
    return results;
  };

  makeMapCells = function(values, mapper) {
    var k, results;
    results = [];
    for (k of values) {
      results.push(`<td>${mapper(k)}</td>`);
    }
    return results;
  };

  document.flexibel = {makeKeyCells, makeValueCells, countIt, maxValue, maxKey, keys, values, delws, ejoin, htmlset, checkedof, valueof, valueset, element, first, last, max, min, sum, sub, mul, div, all, any};

  runParser = function(input) {
    var getCurrent, next, parseNumber, parserState, ref;
    parserState = {
      result: [],
      currentPosition: 0,
      input: input
    };
    getCurrent = function(state) {
      return state.input[state.currentPosition];
    };
    next = function(state) {
      var current;
      current = getCurrent(state);
      state.currentPosition++;
      return current;
    };
    parseNumber = function(state) {
      var buffer, current, ref;
      buffer = next(state);
      while (ref = (current = next(state)), indexOf.call("0123456789.", ref) >= 0) {
        buffer += current;
      }
      return state.result.push(parseFloat(buffer));
    };
    while (parserState.currentPosition < input.length) {
      if (ref = getCurrent(parserState), indexOf.call("0123456789-", ref) >= 0) {
        parseNumber(parserState);
      } else {
        next(parserState);
      }
    }
    return parserState.result;
  };

  // 86 80 25 77 73 76 100 90 69 93 90 83 70 73 73 70 90 83 71 95 40 58 68 69 100 78 87 97 92 74
  runApplication = function() {
    var input, isPopulation;
    input = runParser(valueof("seqInput"));
    isPopulation = checkedof("checkbox1");
    return htmlset("reportPlace", makeReport(input, isPopulation));
  };

  makeReport = function(data, isPopulation) {
    var parameters, target;
    parameters = getStatisticParameters(data, isPopulation);
    target = isPopulation ? "генеральной совокупности" : "выборки";
    return ["<ul class='mdc-list mdc-list--two-line'>", reportElement(`Размер ${target}:`, parameters.size), reportElement(`Сумма ${target}:`, parameters.summa), reportElement(`Максимум ${target}:`, parameters.maximum), reportElement(`Минимум ${target}:`, parameters.minimum), reportElement(`Среднее ${target}:`, parameters.mean), reportElement(`Медиана ${target}:`, parameters.median), reportElement(`Моды ${target}:`, parameters.modes.join(", ")), reportElement(`Размах ${target}:`, parameters.range), reportElement(`Дисперсия ${target}:`, parameters.variance), reportElement(`Стандартное отклонение ${target}:`, parameters.sd), reportElement("Ошибка среднего:", parameters.se), reportElement("Коэффициент вариации (%): ", parameters.kvariance), "</ul>", getFerqsTable(parameters.freqs, parameters.size)].join("");
  };

  reportElement = function(title, value) {
    return `<li class="mdc-list-item">
	<span class="mdc-list-item__text">
		<span class="mdc-list-item__primary-text" style="color: #3f51b5; font-size: 12px;">
			${title}
		</span>
		<span class="mdc-list-item__secondary-text" style="padding-left: 10px;">
			${value}
		</span>
	</span>
</li>`;
  };

  getStatisticParameters = function(data, isPopulation) {
    var freqs, kvariance, maximum, mean, median, minimum, modes, orderedData, range, sd, se, size, summa, variance;
    size = data.length;
    summa = sum(data);
    mean = summa / size;
    orderedData = data.sort(sub);
    maximum = document.flexibel.max(orderedData);
    minimum = document.flexibel.min(orderedData);
    median = findMedian(orderedData);
    range = maximum - minimum;
    variance = orderedData.map(function(x) {
      return (x - mean) ** 2;
    }).reduce(sum) / (isPopulation ? size : size - 1);
    sd = Math.sqrt(variance);
    se = sd / Math.sqrt(size);
    kvariance = sd / mean * 100;
    freqs = counter(orderedData);
    modes = findMode(freqs);
    return {size, summa, mean, median, maximum, minimum, range, variance, sd, freqs, modes, se, kvariance};
  };

  getFerqsTable = function(freqs, size) {
    return `<div style="overflow: auto; width: 100%;">
<table class="mdl-data-table mdl-js-data-table">
	<tr>
		<td>x</td>
		${ejoin(makeKeyCells(freqs))}
	</tr>
	<tr>
		<td>f</td>
		${ejoin(makeValueCells(freqs))}
	</tr>
	<tr>
		<td>ω</td>
		${ejoin(makeMapCells(freqs, function(i) {
      return new String(i[1] / size).substr(0, 5);
    }))}
	</tr>
</table>
</div>`;
  };

  findMode = function(freqs) {
    var i, results;
    max = maxValue(freqs);
    results = [];
    for (i of freqs) {
      if (i[1] === max) {
        results.push(i[0]);
      }
    }
    return results;
  };

  findMedian = function(data) {
    if (data.length % 2 === 0) {
      return (data[data.length / 2] + data[data.length / 2 + 1]) / 2;
    }
    return data[Math.floor(data.length / 2)];
  };

  counter = function(values) {
    var i, j, len, map;
    map = new Map();
    for (j = 0, len = values.length; j < len; j++) {
      i = values[j];
      countIt(map, i);
    }
    return map;
  };

  runParser = function(input) {
    var getCurrent, next, parseNumber, parserState, ref;
    parserState = {
      result: [],
      currentPosition: 0,
      input: input
    };
    getCurrent = function(state) {
      return state.input[state.currentPosition];
    };
    next = function(state) {
      var current;
      current = getCurrent(state);
      state.currentPosition++;
      return current;
    };
    parseNumber = function(state) {
      var buffer, current, ref;
      buffer = next(state);
      while (ref = (current = next(state)), indexOf.call("0123456789.", ref) >= 0) {
        buffer += current;
      }
      return state.result.push(parseFloat(buffer));
    };
    while (parserState.currentPosition < input.length) {
      if (ref = getCurrent(parserState), indexOf.call("0123456789-", ref) >= 0) {
        parseNumber(parserState);
      } else {
        next(parserState);
      }
    }
    return parserState.result;
  };

  element("runButton").addEventListener("click", runApplication);

}).call(this);
