// Generated by CoffeeScript 2.5.1
(function() {
  // Operator function for '-'
  var all, any, changeGroup, checkedof, converter, countIt, delws, div, ejoin, element, findInGroup, first, fromUnitsList, h1, h2, h3, h4, h5, h6, htmlget, htmlset, keys, last, makeKeyCells, makeMapCells, makeSelect, makeValueCells, max, maxKey, maxValue, min, mul, neue, neueText, onselec, runParser, state, sub, sum, toUnitsList, unique, valueof, values, valueset, weightConverter, weightGroup, yieldConverter, yieldGroup,
    indexOf = [].indexOf;

  sub = function(x, y) {
    return x - y;
  };

  // Operator function for '+', also allow to sum of array
  sum = function(x, y) {
    if (y == null) {
      return x.reduce(document.flexibel.sum);
    }
    return x + y;
  };

  // Operator function for '*', also allow to mul of array
  mul = function(x, y) {
    if (y == null) {
      return x.reduce(document.flexibel.mul);
    }
    return x * y;
  };

  // Operator function for '/'
  div = function(x, y) {
    return x / y;
  };

  // Returns the min of two elements, or min of array
  min = function(x, y) {
    if (y == null) {
      return x.reduce(document.flexibel.min);
    }
    if (x < y) {
      return x;
    } else {
      return y;
    }
  };

  // Returns the max of two elements, or max of array
  max = function(x, y) {
    if (y == null) {
      return x.reduce(document.flexibel.max);
    }
    if (x > y) {
      return x;
    } else {
      return y;
    }
  };

  last = function(container) {
    return container[container.length - 1];
  };

  first = function(container) {
    return container[0];
  };

  neue = function(name, inner) {
    var elem;
    elem = document.createElement(name);
    if (inner != null) {
      elem.innerHTML = inner;
    }
    return elem;
  };

  neueText = function(name, inner) {
    var elem;
    elem = document.createElement(name);
    if (inner != null) {
      elem.innerText = inner;
    }
    return elem;
  };

  div = function(inner) {
    var elem;
    elem = document.createElement("div");
    if (inner != null) {
      elem.innerHTML = inner;
    }
    return elem;
  };

  h1 = function(text) {
    return neueText("h1", text);
  };

  h2 = function(text) {
    return neueText("h2", text);
  };

  h3 = function(text) {
    return neueText("h3", text);
  };

  h4 = function(text) {
    return neueText("h4", text);
  };

  h5 = function(text) {
    return neueText("h5", text);
  };

  h6 = function(text) {
    return neueText("h6", text);
  };

  element = function(id) {
    if (id.startsWith(".")) {
      return document.getElementsByClassName(id.substring(1));
    }
    return document.getElementById(id);
  };

  valueset = function(id, value) {
    return document.flexibel.element(id).value = value;
  };

  valueof = function(id) {
    return document.flexibel.element(id).value;
  };

  checkedof = function(id) {
    return document.flexibel.element(id).checked;
  };

  htmlset = function(id, html) {
    return document.flexibel.element(id).innerHTML = html;
  };

  htmlget = function(id) {
    return document.flexibel.element(id).innerHTML;
  };

  any = function(values, f) {
    var i, j, len;
    for (j = 0, len = values.length; j < len; j++) {
      i = values[j];
      if (f(i)) {
        return true;
      }
    }
    return false;
  };

  all = function(values, f) {
    var i, j, len;
    for (j = 0, len = values.length; j < len; j++) {
      i = values[j];
      if (!f(i)) {
        return false;
      }
    }
    return true;
  };

  ejoin = function(values) {
    return values.join("");
  };

  delws = function(str, sym) {
    return str.replace(/\s+/g, "");
  };

  values = function(map) {
    return [...map.values()];
  };

  keys = function(map) {
    return [...map.keys()];
  };

  maxKey = function(map) {
    return document.flexibel.keys(map).reduce(document.flexibel.max);
  };

  maxValue = function(map) {
    return document.flexibel.values(map).reduce(document.flexibel.max);
  };

  unique = function(values) {
    return [...new Set(values)];
  };

  countIt = function(map, it) {
    if (map.has(it)) {
      return map.set(it, map.get(it) + 1);
    } else {
      return map.set(it, 1);
    }
  };

  makeValueCells = function(map) {
    var ref, results, v;
    ref = map.values();
    results = [];
    for (v of ref) {
      results.push(`<td>${v}</td>`);
    }
    return results;
  };

  makeKeyCells = function(map) {
    var k, ref, results;
    ref = map.keys();
    results = [];
    for (k of ref) {
      results.push(`<td>${k}</td>`);
    }
    return results;
  };

  makeMapCells = function(values, mapper) {
    var k, results;
    results = [];
    for (k of values) {
      results.push(`<td>${mapper(k)}</td>`);
    }
    return results;
  };

  document.flexibel = {makeKeyCells, makeValueCells, countIt, maxValue, maxKey, keys, values, delws, ejoin, htmlset, checkedof, valueof, valueset, element, first, last, max, min, sum, sub, mul, div, all, any};

  runParser = function(input) {
    var getCurrent, next, parseNumber, parserState, ref;
    parserState = {
      result: [],
      currentPosition: 0,
      input: input
    };
    getCurrent = function(state) {
      return state.input[state.currentPosition];
    };
    next = function(state) {
      var current;
      current = getCurrent(state);
      state.currentPosition++;
      return current;
    };
    parseNumber = function(state) {
      var buffer, current, ref;
      buffer = next(state);
      while (ref = (current = next(state)), indexOf.call("0123456789.", ref) >= 0) {
        buffer += current;
      }
      return state.result.push(parseFloat(buffer));
    };
    while (parserState.currentPosition < input.length) {
      if (ref = getCurrent(parserState), indexOf.call("0123456789-", ref) >= 0) {
        parseNumber(parserState);
      } else {
        next(parserState);
      }
    }
    return parserState.result;
  };

  converter = function(name) {
    return {name};
  };

  makeSelect = function(id, items) {
    var i, j, len, result;
    result = `<select id=${id}>`;
    for (j = 0, len = items.length; j < len; j++) {
      i = items[j];
      result += `<option value="${i.name}">${i.name}</option>`;
    }
    return result + "</select>";
  };

  fromUnitsList = element("from-units");

  toUnitsList = element("to-units");

  weightGroup = [converter("мкг"), converter("мг"), converter("г"), converter("кг"), converter("ц"), converter("т"), converter("а.е.м.")];

  weightConverter = function(value, fr, to) {
    switch (fr.name) {
      case "мкг":
        switch (to.name) {
          case "мкг":
            return value;
          case "мг":
            return value / 10 ** 3;
          case "г":
            return value / 10 ** 6;
          case "кг":
            return value / 10 ** 9;
          case "ц":
            return value / 10 ** 11;
          case "т":
            return value / 10 ** 12;
          case "а.е.м.":
            return value / (1.66053906660 * 10 ** (-19));
        }
      case "мг":
        switch (to.name) {
          case "мкг":
            return value * 10 ** 3;
          case "мг":
            return value;
          case "г":
            return value / 10 ** 3;
          case "кг":
            return value / 10 ** 6;
          case "ц":
            return value / 10 ** 8;
          case "т":
            return value / 10 ** 9;
          case "а.е.м.":
            return value / (1.66053906660 * 10 ** (-21));
        }
      case "г":
        switch (to.name) {
          case "мкг":
            return value * 10 ** 6;
          case "мг":
            return value * 10 ** 3;
          case "г":
            return value;
          case "кг":
            return value / 10 ** 3;
          case "ц":
            return value / 10 ** 5;
          case "т":
            return value / 10 ** 6;
          case "а.е.м.":
            return value / (1.66053906660 * 10 ** (-24));
        }
      case "кг":
        switch (to.name) {
          case "мкг":
            return value * 10 ** 9;
          case "мг":
            return value * 10 ** 6;
          case "г":
            return value * 10 ** 3;
          case "кг":
            return value;
          case "ц":
            return value / 10 ** 2;
          case "т":
            return value / 10 ** 3;
          case "а.е.м.":
            return value / (1.66053906660 * 10 ** (-27));
        }
      case "ц":
        switch (to.name) {
          case "мкг":
            return value * 10 ** 11;
          case "мг":
            return value * 10 ** 8;
          case "г":
            return value * 10 ** 5;
          case "кг":
            return value * 10 ** 2;
          case "ц":
            return value;
          case "т":
            return value / 10;
          case "а.е.м.":
            return value / (1.66053906660 * 10 ** (-29));
        }
      case "т":
        switch (to.name) {
          case "мкг":
            return value * 10 ** 12;
          case "мг":
            return value * 10 ** 9;
          case "г":
            return value * 10 ** 6;
          case "кг":
            return value * 10 ** 3;
          case "ц":
            return value * 10 ** 2;
          case "т":
            return value;
          case "а.е.м.":
            return value / (1.66053906660 * 10 ** (-30));
        }
      case "а.е.м.":
        switch (to.name) {
          case "мкг":
            return value * 1.66053906660 * 10 ** (-19);
          case "мг":
            return value * 1.66053906660 * 10 ** (-21);
          case "г":
            return value * 1.66053906660 * 10 ** (-24);
          case "кг":
            return value * 1.66053906660 * 10 ** (-27);
          case "ц":
            return value * 1.66053906660 * 10 ** (-29);
          case "т":
            return value * 1.66053906660 * 10 ** (-30);
          case "а.е.м.":
            return value;
        }
    }
  };

  yieldGroup = [converter("т/га"), converter("ц/га"), converter("кг/м^2"), converter("кг/га"), converter("т/акр"), converter("ц/акр"), converter("кг/акр")];

  yieldConverter = function(value, fr, to) {
    switch (fr.name) {
      case "т/га":
        switch (to.name) {
          case "т/га":
            return value;
          case "ц/га":
            return value * 10;
          case "кг/га":
            return value * 1000;
          case "кг/м^2":
            return value * 1000 * 10000;
          case "т/акр":
            return value * 0.405;
          case "ц/акр":
            return (value * 0.405) / 100;
          case "кг/акр":
            return value * 0.405;
        }
      case "ц/га":
        switch (to.name) {
          case "ц/га":
            return value;
          case "т/га":
            return value / 10;
          case "кг/га":
            return value * 100;
          case "кг/м^2":
            return value * 100 * 10000;
          case "т/акр":
            return (value * 0.405) / 10000;
          case "ц/акр":
            return (value * 0.405) / 1000;
          case "кг/акр":
            return value * 0.405 / 100;
        }
      case "кг/м^2":
        switch (to.name) {
          case "ц/га":
            return value / 100 / 10000;
          case "т/га":
            return value / 1000 / 10000;
          case "кг/га":
            return value / 10000;
          case "кг/м^2":
            return value;
          case "т/акр":
            return (value * 0.405) / 1000 / 1000 / 10000;
          case "ц/акр":
            return (value * 0.405) / 1000 / 100 / 10000;
          case "кг/акр":
            return value * 0.405 / 10000 / 1000;
        }
      case "кг/га":
        switch (to.name) {
          case "ц/га":
            return value * 100;
          case "т/га":
            return value * 1000;
          case "кг/га":
            return value;
          case "кг/м^2":
            return value * 10000;
        }
    }
  };

  state = {
    group: yieldGroup,
    convert: yieldConverter
  };

  findInGroup = function(name) {
    var i, j, len, ref;
    ref = state.group;
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (i.name === name) {
        return i;
      }
    }
  };

  onselec = function(e) {
    var fromUnit, fromValue, fromu, toUnit, tou;
    fromUnit = element("from-unit");
    fromu = findInGroup(fromUnit.options[fromUnit.selectedIndex].value);
    toUnit = element("to-unit");
    tou = findInGroup(toUnit.options[toUnit.selectedIndex].value);
    fromValue = runParser(valueof("from-unit-value"));
    return valueset("to-unit-value", state.convert(fromValue, fromu, tou));
  };

  changeGroup = function() {
    var groupName, unitGroup;
    unitGroup = element("unit-group");
    groupName = unitGroup.options[unitGroup.selectedIndex].value;
    switch (groupName) {
      case "yield":
        state.group = yieldGroup;
        state.convert = yieldConverter;
        break;
      case "mass":
        state.group = weightGroup;
        state.convert = weightConverter;
    }
    fromUnitsList.innerHTML = makeSelect("from-unit", state.group);
    toUnitsList.innerHTML = makeSelect("to-unit", state.group);
    element("from-unit").addEventListener("change", onselec);
    return element("to-unit").addEventListener("change", onselec);
  };

  element("from-unit-value").addEventListener("change", onselec);

  element("unit-group").addEventListener("change", changeGroup);

  changeGroup();

}).call(this);
