// Generated by CoffeeScript 2.5.1
(function() {
  var addFilterPanel, applyFilters, autorOnClick, clearAllFilters, completeFilterDeletion, createRegExpFromSearchText, filetypeOnClick, filters, isSatisfiedToAllFilters, isSatisfiedToAutorFilter, isSatisfiedToFileTypeFilter, isSatisfiedToLanguageFilter, isSatisfiedToSearch, makeFilterPanel, makeFilterPanelWithClass, searchInputClear, updateResults, updateSearchText,
    indexOf = [].indexOf;

  filters = {
    requiredLanguages: [],
    requiredFileTypes: [],
    requiredAutors: [],
    searchText: "",
    cachedRegex: null,
    atLeastOneIsFound: true,
    disableUpdate: false
  };

  isSatisfiedToLanguageFilter = function(record) {
    var language;
    if (filters.requiredLanguages.length === 0) {
      return true;
    }
    language = record.dataset.language;
    return filters.requiredLanguages.some(function(requiredLanguage) {
      return language === requiredLanguage;
    });
  };

  isSatisfiedToFileTypeFilter = function(record) {
    var fileType;
    if (filters.requiredFileTypes.length === 0) {
      return true;
    }
    fileType = record.querySelector(".file-type-tag").innerText.trim();
    return filters.requiredFileTypes.some(function(requiredFileType) {
      return fileType === requiredFileType;
    });
  };

  isSatisfiedToAutorFilter = function(record) {
    var autorsNames, j, len, ref, requiredAutorName;
    if (filters.requiredAutors.length === 0) {
      return true;
    }
    autorsNames = [...record.getElementsByClassName("record-autor")].map(function(autor) {
      return autor.innerText;
    });
    ref = filters.requiredAutors;
    for (j = 0, len = ref.length; j < len; j++) {
      requiredAutorName = ref[j];
      if (indexOf.call(autorsNames, requiredAutorName) < 0) {
        return false;
      }
    }
    return true;
  };

  isSatisfiedToSearch = function(record) {
    var recordTitle;
    if (filters.cachedRegex === null) {
      return true;
    }
    recordTitle = record.querySelector(".record-title:first-child>a");
    return filters.cachedRegex.test(recordTitle.innerText);
  };

  isSatisfiedToAllFilters = function(record) {
    return isSatisfiedToLanguageFilter(record) && isSatisfiedToFileTypeFilter(record) && isSatisfiedToAutorFilter(record) && isSatisfiedToSearch(record);
  };

  makeFilterPanelWithClass = function(text, deleteAction, className) {
    var panel;
    panel = document.createElement("div");
    panel.className = "panel filter-panel " + className;
    panel.style.display = "none";
    panel.innerHTML = `<span>${text}</span> <button type='button' class='close-panel-btn' onclick='${deleteAction}'> <svg viewBox='0 0 24 24'> <path d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /> </svg> </button>`;
    return panel;
  };

  makeFilterPanel = function(text, deleteAction) {
    return makeFilterPanelWithClass(text, deleteAction, "");
  };

  addFilterPanel = function(panel) {
    document.getElementById("filter-area").appendChild(panel);
    return $(panel).fadeIn();
  };

  applyFilters = function() {
    var j, len, record, records;
    records = document.getElementById("search-box").getElementsByClassName("record");
    for (j = 0, len = records.length; j < len; j++) {
      record = records[j];
      if (isSatisfiedToAllFilters(record)) {
        record.style.display = "block";
        filters.atLeastOneIsFound = true;
      } else {
        record.style.display = "none";
      }
    }
    if (!filters.atLeastOneIsFound) {
      return document.getElementById("nothing-is-found").style.display = "flex";
    } else {
      return document.getElementById("nothing-is-found").style.display = "none";
    }
  };

  updateResults = function() {
    if (filters.disableUpdate) {
      return;
    }
    filters.atLeastOneIsFound = false;
    $("#search-box").fadeOut();
    setTimeout(applyFilters, 300);
    $("#search-box").fadeIn();
    return null;
  };

  autorOnClick = function(event) {
    var autorName, filterPanel;
    if (!event.target.classList.contains("record-autor")) {
      return;
    }
    autorName = event.target.innerText;
    if (indexOf.call(filters.requiredAutors, autorName) >= 0) {
      return;
    }
    filters.requiredAutors.push(autorName);
    filterPanel = makeFilterPanel(`Автор: ${autorName}`, `document.deleteAutorFilter(this, \"${autorName}\")`);
    addFilterPanel(filterPanel);
    return updateResults();
  };

  completeFilterDeletion = function(self) {
    $(self.parentNode).fadeOut(function() {
      return self.parentNode.remove();
    });
    return updateResults();
  };

  document.deleteAutorFilter = function(self, autorName) {
    var index;
    index = filters.requiredAutors.indexOf(autorName);
    filters.requiredAutors.splice(index, 1);
    return completeFilterDeletion(self);
  };

  document.deleteFileTypeFilter = function(self, fileTypeName) {
    var index;
    index = filters.requiredFileTypes.indexOf(fileTypeName);
    filters.requiredFileTypes.splice(index, 1);
    return completeFilterDeletion(self);
  };

  filetypeOnClick = function(event) {
    var filterPanel, requiredFileType;
    if (!event.target.classList.contains("file-type-tag")) {
      return;
    }
    requiredFileType = event.target.innerText;
    filters.requiredFileTypes.push(requiredFileType);
    filterPanel = makeFilterPanelWithClass(`Тип: ${requiredFileType}`, `document.deleteFileTypeFilter(this, \"${requiredFileType}\")`, "file-type-tag-" + requiredFileType.replace(".", ""));
    addFilterPanel(filterPanel);
    return updateResults();
  };

  document.filterByLanguage = function(language) {
    var filterPanel;
    filters.requiredLanguages.push(language);
    filterPanel = makeFilterPanel(`Язык: ${language}`, `document.deleteLanguageFilter(this, \"${language}\")`);
    addFilterPanel(filterPanel);
    return updateResults();
  };

  document.deleteLanguageFilter = function(self, language) {
    var index;
    index = filters.requiredLanguages.indexOf(language);
    filters.requiredLanguages.splice(index, 1);
    return completeFilterDeletion(self);
  };

  createRegExpFromSearchText = function(string) {
    if (string !== "") {
      return new RegExp(string, 'i');
    }
    return null;
  };

  updateSearchText = function(event) {
    var searchInput;
    searchInput = document.getElementById("search-input");
    // If clicked a search button several times, but input stay the same
    if (filters.searchText === searchInput.value) {
      return;
    }
    filters.searchText = searchInput.value;
    filters.cachedRegex = createRegExpFromSearchText(filters.searchText);
    return updateResults();
  };

  searchInputClear = function(event) {
    var searchInput;
    searchInput = document.getElementById("search-input");
    searchInput.value = "";
    return updateSearchText();
  };

  clearAllFilters = function() {
    var i, j, len, ref, searchInput;
    filters.disableUpdate = true;
    searchInput = document.getElementById("search-input");
    searchInput.value = "";
    filters.searchText = searchInput.value;
    filters.cachedRegex = createRegExpFromSearchText(filters.searchText);
    ref = document.getElementById("filter-area").children;
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      i.querySelector(".close-panel-btn").click();
    }
    filters.disableUpdate = false;
    return updateResults();
  };

  document.getElementById("search-box").addEventListener("click", autorOnClick);

  document.getElementById("search-box").addEventListener("click", filetypeOnClick);

  document.getElementById("main-panel").addEventListener("click", filetypeOnClick);

  document.getElementById("search-input").addEventListener("change", updateSearchText);

  document.getElementById("search-button").addEventListener("click", updateSearchText);

  document.getElementById("search-clear").addEventListener("click", searchInputClear);

  document.getElementById("nothing-is-found-clear").addEventListener("click", clearAllFilters);

}).call(this);
