"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeKeyCells = exports.makeValueCells = exports.countIt = exports.maxValue = exports.maxKey = exports.keys = exports.values = exports.delws = exports.del = exports.ejoin = exports.htmlset = exports.checkedof = exports.valueof = exports.valueset = exports.element = exports.first = exports.last = exports.max = exports.min = exports.div = exports.mul = exports.sum = exports.sub = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

// Generated by CoffeeScript 2.4.1
// Operator function for '-'
var sub = function sub(x, y) {
  return x - y;
}; // Operator function for '+', also allow to sum of array


exports.sub = sub;

var sum = function sum(x, y) {
  if (y == null) {
    return x.reduce(sum);
  }

  return x + y;
}; // Operator function for '*', also allow to mul of array


exports.sum = sum;

var mul = function mul(x, y) {
  if (y == null) {
    return x.reduce(mul);
  }

  return x * y;
}; // Operator function for '/'


exports.mul = mul;

var div = function div(x, y) {
  return x / y;
}; // Returns the min of two elements, or min of array


exports.div = div;

var min = function min(x, y) {
  if (y == null) {
    return x.reduce(min);
  }

  if (x < y) {
    return x;
  } else {
    return y;
  }
}; // Returns the max of two elements, or max of array


exports.min = min;

var max = function max(x, y) {
  if (y == null) {
    return x.reduce(max);
  }

  if (x > y) {
    return x;
  } else {
    return y;
  }
};

exports.max = max;

var last = function last(container) {
  return container[container.length - 1];
};

exports.last = last;

var first = function first(container) {
  return container[0];
};

exports.first = first;

var element = function element(id) {
  return document.getElementById(id);
};

exports.element = element;

var valueset = function valueset(id, value) {
  return element(id).value = value;
};

exports.valueset = valueset;

var valueof = function valueof(id) {
  return element(id).value;
};

exports.valueof = valueof;

var checkedof = function checkedof(id) {
  return element(id).checked;
};

exports.checkedof = checkedof;

var htmlset = function htmlset(id, html) {
  return element(id).innerHTML = html;
};

exports.htmlset = htmlset;

var ejoin = function ejoin(values) {
  return values.join("");
};

exports.ejoin = ejoin;

var del = function del(str, sym) {
  return str.replace(new Regex(sym, "g"), "");
};

exports.del = del;

var delws = function delws(str, sym) {
  return str.replace(/\w+/, "");
};

exports.delws = delws;

var values = function values(map) {
  return _toConsumableArray(map.values());
};

exports.values = values;

var keys = function keys(map) {
  return _toConsumableArray(map.values());
};

exports.keys = keys;

var maxKey = function maxKey(map) {
  return keys(map).reduce(max);
};

exports.maxKey = maxKey;

var maxValue = function maxValue(map) {
  return values(map).reduce(max);
};

exports.maxValue = maxValue;

var countIt = function countIt(map, it) {
  if (map.has(it)) {
    return map.set(it, map.get(it) + 1);
  } else {
    return map.set(it, 1);
  }
};

exports.countIt = countIt;

var makeValueCells = function makeValueCells(map) {
  var ref, results, v;
  ref = map.values();
  results = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = ref[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      v = _step.value;
      results.push("<td>".concat(v, "</td>"));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return results;
};

exports.makeValueCells = makeValueCells;

var makeKeyCells = function makeKeyCells(map) {
  var k, ref, results;
  ref = map.keys();
  results = [];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = ref[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      k = _step2.value;
      results.push("<td>".concat(k, "</td>"));
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return results;
};

exports.makeKeyCells = makeKeyCells;