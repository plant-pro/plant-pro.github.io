"use strict";var DNA_VALID_CHARS=["A","T","G","C","a","t","g","c","А","Т","Г","Ц","а","т","г","ц"];var DNA_COMPLIMENTARY=new Map([["A","T"],["T","A"],["G","C"],["C","G"]]);var RNA_COMPLIMENTARY=new Map([["A","U"],["T","A"],["U","A"],["G","C"],["C","G"]]);var GENETIC_CODE=new Map([["UUU","Phe"],["UUC","Phe"],["UUA","Leu"],["UCU","Ser"],["UCC","Ser"],["UCA","Ser"],["UCG","Ser"],["UAU","Tyr"],["UAC","Tyr"],["UAA","Stop"],["UAG","Stop"],["UGU","Cys"],["UGC","Cys"],["UGA","Stop"],["UGG","Trp"],["CUU","Leu"],["CUC","Leu"],["CUA","Leu"],["CUG","Leu"],["CCU","Pro"],["CCC","Pro"],["CCA","Pro"],["CCG","Pro"],["CAU","His"],["CAC","His"],["CAA","Gln"],["CAG","Gln"],["CGU","Arg"],["CGC","Arg"],["CGA","Arg"],["CGG","Arg"],["AUU","Ile"],["AUC","Ile"],["AUA","Ile"],["AUG","Met"],["GUU","Val"],["GUC","Val"],["GUA","Val"],["GUG","Val"],["ACU","Thr"],["ACC","Thr"],["ACA","Thr"],["ACG","Thr"],["GCU","Ala"],["GCC","Ala"],["GCA","Ala"],["GCG","Ala"],["AAU","Asn"],["AAC","Asn"],["AAA","Lys"],["AAG","Lys"],["GAU","Asp"],["GAC","Asp"],["GAA","Gln"],["GAG","Gln"],["AGU","Ser"],["AGC","Ser"],["AGA","Arg"],["AGG","Arg"],["GGU","Gly"],["GGC","Gly"],["GGA","Gly"],["GGG","Gly"]]);function runApplication(){var dnaInput=document.mainForm.dnaInput;var dna2Input=document.mainForm.dna2Input;var irnaInput=document.mainForm.irnaInput;var trnaInput=document.mainForm.trnaInput;var proteinInput=document.mainForm.proteinInput;var dna1Sequence=uniformDNA(dnaInput.value);var dna2Sequence=makeDNA2(dna1Sequence);var irnaSequence=makeiRNA(dna1Sequence);var trnaSequence=maketRNA(irnaSequence);var proteinSequence=makeProtein(irnaSequence);dnaInput.value=dna1Sequence;dna2Input.value=dna2Sequence;irnaInput.value=irnaSequence;trnaInput.value=trnaSequence;proteinInput.value=proteinSequence}function makeProtein(irna){function divideIntoTriplets(irna){var triplets=[];var triplet="";var index=0;var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=irna[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var i=_step.value;triplet+=i;index++;if(index===3){triplets.push(triplet);triplet="";index=0}}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator["return"]!=null){_iterator["return"]()}}finally{if(_didIteratorError){throw _iteratorError}}}return triplets}var triplets=divideIntoTriplets(irna);return triplets.map(function(x){return GENETIC_CODE.get(x)}).join("-")}function makeDNA2(dna1){var dna2="";var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=dna1[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var symbol=_step2.value;dna2+=DNA_COMPLIMENTARY.get(symbol)}}catch(err){_didIteratorError2=true;_iteratorError2=err}finally{try{if(!_iteratorNormalCompletion2&&_iterator2["return"]!=null){_iterator2["return"]()}}finally{if(_didIteratorError2){throw _iteratorError2}}}return dna2}function makeiRNA(dna1){var irna="";var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=dna1[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var symbol=_step3.value;irna+=RNA_COMPLIMENTARY.get(symbol)}}catch(err){_didIteratorError3=true;_iteratorError3=err}finally{try{if(!_iteratorNormalCompletion3&&_iterator3["return"]!=null){_iterator3["return"]()}}finally{if(_didIteratorError3){throw _iteratorError3}}}return irna}function maketRNA(irna){var trna="";var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=irna[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var symbol=_step4.value;trna+=RNA_COMPLIMENTARY.get(symbol)}}catch(err){_didIteratorError4=true;_iteratorError4=err}finally{try{if(!_iteratorNormalCompletion4&&_iterator4["return"]!=null){_iterator4["return"]()}}finally{if(_didIteratorError4){throw _iteratorError4}}}return trna}function uniformDNA(dna){var uniformedDNA="";var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=dna[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){var i=_step5.value;uniformedDNA+=uniform(i)}}catch(err){_didIteratorError5=true;_iteratorError5=err}finally{try{if(!_iteratorNormalCompletion5&&_iterator5["return"]!=null){_iterator5["return"]()}}finally{if(_didIteratorError5){throw _iteratorError5}}}return uniformedDNA}function uniform(nucleotideProto){nucleotideProto=nucleotideProto.toUpperCase();if(nucleotideProto==="A"){return"A"}if(nucleotideProto==="T"){return"T"}if(nucleotideProto==="G"){return"G"}if(nucleotideProto==="C"){return"C"}if(nucleotideProto==="U"){return"U"}return nucleotideProto}function filterDNA(event){var _char=String.fromCharCode(event.keyCode);event.returnValue=isValidChar(_char)}function isValidChar(_char2){return DNA_VALID_CHARS.includes(_char2)}