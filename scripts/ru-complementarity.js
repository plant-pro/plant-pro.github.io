"use strict";var DNA_VALID_CHARS=["A","T","G","C","a","t","g","c","А","Т","Г","Ц","а","т","г","ц"," "];var RNA_VALID_CHARS=["A","U","G","C","a","u","g","c","А","У","Г","Ц","а","у","г","ц"," "];var DNA_COMPLIMENTARY=new Map([["А","Т"],["Т","А"],["Г","Ц"],["У","А"],["Ц","Г"]]);var RNA_COMPLIMENTARY=new Map([["А","У"],["Т","А"],["У","А"],["Г","Ц"],["Ц","Г"]]);var GENETIC_CODE=new Map([["УУУ","ФЕН"],["УУЦ","ФЕН"],["УУА","ЛЕЙ"],["УЦУ","СЕР"],["УЦЦ","СЕР"],["УЦА","СЕР"],["УЦГ","СЕР"],["УАУ","ТИР"],["УАЦ","ТИР"],["УАА","СТОП"],["УАГ","СТОП"],["УГУ","ЦИС"],["УГЦ","ЦИС"],["УГА","СТОП"],["УГГ","ТРИ"],["ЦУУ","ЛЕЙ"],["ЦУЦ","ЛЕЙ"],["ЦУА","ЛЕЙ"],["ЦУГ","ЛЕЙ"],["ЦЦУ","ПРО"],["ЦЦЦ","ПРО"],["ЦЦА","ПРО"],["ЦЦГ","ПРО"],["ЦАУ","ГИС"],["ЦАЦ","ГИС"],["ЦАА","ГЛУ"],["ЦАГ","ГЛУ"],["ЦГУ","АРГ"],["ЦГЦ","АРГ"],["ЦГА","АРГ"],["ЦГГ","АРГ"],["АУУ","ИЛЕ"],["АУЦ","ИЛЕ"],["АУА","ИЛЕ"],["АУГ","МЕТ"],["ГУУ","ВАЛ"],["ГУЦ","ВАЛ"],["ГУА","ВАЛ"],["ГУГ","ВАЛ"],["АЦУ","ТРЕ"],["АЦЦ","ТРЕ"],["АЦА","ТРЕ"],["АЦГ","ТРЕ"],["ГЦУ","АЛА"],["ГЦЦ","АЛА"],["ГЦА","АЛА"],["ГЦГ","АЛА"],["ААУ","АСН"],["ААЦ","АСН"],["ААА","ЛИЗ"],["ААГ","ЛИЗ"],["ГАУ","АСП"],["ГАЦ","АСП"],["ГАА","ГЛУ"],["ГАГ","ГЛУ"],["АГУ","СЕР"],["АГЦ","СЕР"],["АГА","АРГ"],["АГГ","АРГ"],["ГГУ","ГЛИ"],["ГГЦ","ГЛИ"],["ГГА","ГЛИ"],["ГГГ","ГЛИ"]]);var INPUT_TYPE={DNA1:1,DNA2:2,IRNA:3,TRNA:4,PROTEIN:5};var lastInputType=1;function runApplication(){var dnaInput=document.mainForm.dnaInput;var dna2Input=document.mainForm.dna2Input;var irnaInput=document.mainForm.irnaInput;var trnaInput=document.mainForm.trnaInput;var proteinInput=document.mainForm.proteinInput;var result;switch(lastInputType){case 1:result=buildByDnaOne();break;case 2:result=buildByDnaTwo();break;case 3:result=buildByInformationalRna();break;case 4:result=buildByTransferRna();break;case 5:result=buildByProtein();break}dnaInput.value=formatOutput(result.firstDnaSequence);dna2Input.value=formatOutput(result.secondDnaSequence);irnaInput.value=formatOutput(result.informationalRnaSequence);trnaInput.value=formatOutput(result.transferRnaSequence);proteinInput.value=result.proteinSequence}function buildByDnaOne(){var firstDnaSequence=uniformSequence(dnaInput.value);var secondDnaSequence=makeComplimentaryDna(firstDnaSequence);var informationalRnaSequence=makeInformationalRna(firstDnaSequence);var transferRnaSequence=makeTransferRna(informationalRnaSequence);var proteinSequence=makeProteinFromInformationalRna(informationalRnaSequence);return{firstDnaSequence:firstDnaSequence,secondDnaSequence:secondDnaSequence,informationalRnaSequence:informationalRnaSequence,transferRnaSequence:transferRnaSequence,proteinSequence:proteinSequence}}function buildByDnaTwo(){var secondDnaSequence=uniformSequence(dna2Input.value);var firstDnaSequence=makeComplimentaryDna(secondDnaSequence);var informationalRnaSequence=makeInformationalRna(firstDnaSequence);var transferRnaSequence=makeTransferRna(informationalRnaSequence);var proteinSequence=makeProteinFromInformationalRna(informationalRnaSequence);return{firstDnaSequence:firstDnaSequence,secondDnaSequence:secondDnaSequence,informationalRnaSequence:informationalRnaSequence,transferRnaSequence:transferRnaSequence,proteinSequence:proteinSequence}}function buildByInformationalRna(){var informationalRnaSequence=uniformSequence(irnaInput.value);var firstDnaSequence=makeDnaFromiRna(informationalRnaSequence);var secondDnaSequence=makeComplimentaryDna(firstDnaSequence);var transferRnaSequence=makeTransferRna(informationalRnaSequence);var proteinSequence=makeProteinFromInformationalRna(informationalRnaSequence);return{firstDnaSequence:firstDnaSequence,secondDnaSequence:secondDnaSequence,informationalRnaSequence:informationalRnaSequence,transferRnaSequence:transferRnaSequence,proteinSequence:proteinSequence}}function buildByTransferRna(){var transferRnaSequence=uniformSequence(trnaInput.value);var secondDnaSequence=makeDnaFromiRna(transferRnaSequence);var firstDnaSequence=makeComplimentaryDna(secondDnaSequence);var informationalRnaSequence=makeInformationalRna(firstDnaSequence);var proteinSequence=makeProteinFromInformationalRna(informationalRnaSequence);return{firstDnaSequence:firstDnaSequence,secondDnaSequence:secondDnaSequence,informationalRnaSequence:informationalRnaSequence,transferRnaSequence:transferRnaSequence,proteinSequence:proteinSequence}}function buildByProtein(){var proteinSequence=document.mainForm.proteinInput.value;var informationalRnaSequence=makeInformationalRnaFromProtein(proteinSequence);var firstDnaSequence=makeDnaFromiRna(informationalRnaSequence);var secondDnaSequence=makeComplimentaryDna(firstDnaSequence);var transferRnaSequence=makeTransferRna(informationalRnaSequence);return{firstDnaSequence:firstDnaSequence,secondDnaSequence:secondDnaSequence,informationalRnaSequence:informationalRnaSequence,transferRnaSequence:transferRnaSequence,proteinSequence:proteinSequence}}function makeProteinFromInformationalRna(irna){function divideIntoTriplets(irna){var triplets=[];var currentTriplet="";var index=0;var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=irna[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var i=_step.value;currentTriplet+=i;index++;if(index===3){triplets.push(currentTriplet);currentTriplet="";index=0}}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator["return"]!=null){_iterator["return"]()}}finally{if(_didIteratorError){throw _iteratorError}}}return triplets}var triplets=divideIntoTriplets(irna);return triplets.map(function(x){return GENETIC_CODE.get(x)}).join("-")}function makeInformationalRnaFromProtein(protein){var result="";var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=protein.split("-")[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var aminoacid=_step2.value;var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=GENETIC_CODE[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var i=_step3.value;if(i[1]===aminoacid){result+=i[0];break}}}catch(err){_didIteratorError3=true;_iteratorError3=err}finally{try{if(!_iteratorNormalCompletion3&&_iterator3["return"]!=null){_iterator3["return"]()}}finally{if(_didIteratorError3){throw _iteratorError3}}}}}catch(err){_didIteratorError2=true;_iteratorError2=err}finally{try{if(!_iteratorNormalCompletion2&&_iterator2["return"]!=null){_iterator2["return"]()}}finally{if(_didIteratorError2){throw _iteratorError2}}}return result}function mapString(string,mapper){var result="";var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=string[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var _char=_step4.value;result+=mapper(_char)}}catch(err){_didIteratorError4=true;_iteratorError4=err}finally{try{if(!_iteratorNormalCompletion4&&_iterator4["return"]!=null){_iterator4["return"]()}}finally{if(_didIteratorError4){throw _iteratorError4}}}return result}function makeComplimentaryDna(dna){return mapString(dna,function(x){return DNA_COMPLIMENTARY.get(x)})}function makeInformationalRna(dna1){return mapString(dna1,function(x){return RNA_COMPLIMENTARY.get(x)})}function makeDnaFromiRna(irna){return mapString(irna,function(x){return DNA_COMPLIMENTARY.get(x)})}function makeTransferRna(irna){return mapString(irna,function(x){return RNA_COMPLIMENTARY.get(x)})}function uniformSequence(dna){return mapString(dna.replace(/\s/g,""),uniformNucleotide)}function uniformNucleotide(nucleotide){switch(nucleotide.toUpperCase()){case"A":return"А";case"T":return"Т";case"G":return"Г";case"C":return"Ц";case"U":return"У";default:return nucleotide.toUpperCase()}}function validateInput(event,type){lastInputType=type;clearError();if(type===INPUT_TYPE.PROTEIN){var aminoacids=formatProteinSequence(document.mainForm.proteinInput.value.replace(/\-/g,"")).split("-");var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=aminoacids[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){var aminoacid=_step5.value;if(!isValidAminoacid(aminoacid)){logError('Ошибка: неизвестная аминокислота "'.concat(aminoacid,'"'),type);return}}}catch(err){_didIteratorError5=true;_iteratorError5=err}finally{try{if(!_iteratorNormalCompletion5&&_iterator5["return"]!=null){_iterator5["return"]()}}finally{if(_didIteratorError5){throw _iteratorError5}}}document.mainForm.proteinInput.value=formatProteinSequence(document.mainForm.proteinInput.value.replace(/\-/g,""));return}var _getCheckerAndInputEl=getCheckerAndInputElement(type),checker=_getCheckerAndInputEl.checker,inputElement=_getCheckerAndInputEl.inputElement;var _iteratorNormalCompletion6=true;var _didIteratorError6=false;var _iteratorError6=undefined;try{for(var _iterator6=inputElement.value[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6=(_step6=_iterator6.next()).done);_iteratorNormalCompletion6=true){var i=_step6.value;if(!checker(i)){logError('Ошибка: неожиданный символ "'.concat(i,'"'),type);return}}}catch(err){_didIteratorError6=true;_iteratorError6=err}finally{try{if(!_iteratorNormalCompletion6&&_iterator6["return"]!=null){_iterator6["return"]()}}finally{if(_didIteratorError6){throw _iteratorError6}}}inputElement.value=formatOutput(inputElement.value);if(uniformSequence(inputElement.value).length%3!==0){logError("Ошибка: неполный триплет",type)}}function getCheckerAndInputElement(inputType){switch(inputType){case 1:return{checker:isValidDnaChar,inputElement:document.mainForm.dnaInput};case 2:return{checker:isValidDnaChar,inputElement:document.mainForm.dna2Input};case 3:return{checker:isValidRnaChar,inputElement:document.mainForm.irnaInput};case 4:return{checker:isValidRnaChar,inputElement:document.mainForm.trnaInput};default:return{checker:isValidDnaChar,inputElement:document.mainForm.dnaInput}}}function isValidAminoacid(aminoacid){if(aminoacid.length===0){return true}var normalizedAminoacid=aminoacid.toUpperCase();var isPart=false;var _iteratorNormalCompletion7=true;var _didIteratorError7=false;var _iteratorError7=undefined;try{for(var _iterator7=GENETIC_CODE.values()[Symbol.iterator](),_step7;!(_iteratorNormalCompletion7=(_step7=_iterator7.next()).done);_iteratorNormalCompletion7=true){var v=_step7.value;if(v.startsWith(normalizedAminoacid)){isPart=true;break}}}catch(err){_didIteratorError7=true;_iteratorError7=err}finally{try{if(!_iteratorNormalCompletion7&&_iterator7["return"]!=null){_iterator7["return"]()}}finally{if(_didIteratorError7){throw _iteratorError7}}}return isPart}function isValidDnaChar(_char2){return DNA_VALID_CHARS.includes(_char2)}function isValidRnaChar(_char3){return RNA_VALID_CHARS.includes(_char3)}function logError(message,inputType){var logger;switch(inputType){case INPUT_TYPE.DNA1:logger=document.getElementById("dna1err");break;case INPUT_TYPE.DNA2:logger=document.getElementById("dna2err");break;case INPUT_TYPE.IRNA:logger=document.getElementById("irnaerr");break;case INPUT_TYPE.TRNA:logger=document.getElementById("trnaerr");break;case INPUT_TYPE.PROTEIN:logger=document.getElementById("proteinerr");break}logger.innerHTML=message}function clearError(){document.getElementById("dna1err").innerHTML="";document.getElementById("dna2err").innerHTML="";document.getElementById("irnaerr").innerHTML="";document.getElementById("trnaerr").innerHTML="";document.getElementById("proteinerr").innerHTML=""}function formatOutput(sequence){var triplets=[];var currentTriplet="";var index=0;var _iteratorNormalCompletion8=true;var _didIteratorError8=false;var _iteratorError8=undefined;try{for(var _iterator8=uniformSequence(sequence)[Symbol.iterator](),_step8;!(_iteratorNormalCompletion8=(_step8=_iterator8.next()).done);_iteratorNormalCompletion8=true){var i=_step8.value;currentTriplet+=i;index++;if(index===3){triplets.push(currentTriplet);currentTriplet="";index=0}}}catch(err){_didIteratorError8=true;_iteratorError8=err}finally{try{if(!_iteratorNormalCompletion8&&_iterator8["return"]!=null){_iterator8["return"]()}}finally{if(_didIteratorError8){throw _iteratorError8}}}if(currentTriplet.length>0){triplets.push(currentTriplet)}return triplets.join(" ")}function formatProteinSequence(sequence){var triplets=[];var currentTriplet="";var index=0;var _iteratorNormalCompletion9=true;var _didIteratorError9=false;var _iteratorError9=undefined;try{for(var _iterator9=sequence.toUpperCase()[Symbol.iterator](),_step9;!(_iteratorNormalCompletion9=(_step9=_iterator9.next()).done);_iteratorNormalCompletion9=true){var i=_step9.value;currentTriplet+=i;index++;if(index===3&&currentTriplet!=="СТО"||index==4){triplets.push(currentTriplet);currentTriplet="";index=0}}}catch(err){_didIteratorError9=true;_iteratorError9=err}finally{try{if(!_iteratorNormalCompletion9&&_iterator9["return"]!=null){_iterator9["return"]()}}finally{if(_didIteratorError9){throw _iteratorError9}}}if(currentTriplet.length>0){triplets.push(currentTriplet)}return triplets.join("-")}